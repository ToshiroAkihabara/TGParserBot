from aiogram import types, Router, F
from aiogram.utils.markdown import hbold, hlink
from create_bot import bot
from markups import user_markups
from parser.content_data import get_content_ipads

import json
import os

router = Router()


@router.callback_query(F.data == "back")
async def back(event: types.CallbackQuery):
    await bot.answer_callback_query(event.id)
    await bot.delete_message(event.from_user.id, event.message.message_id)
    await bot.send_message(
        event.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫–∞—Ç–∞–ª–æ–≥:",
        reply_markup=user_markups.catalogs(),
    )


@router.callback_query(F.data == "close")
async def close(event: types.CallbackQuery):
    await bot.answer_callback_query(event.id)
    await bot.delete_message(event.from_user.id, event.message.message_id)
    await bot.send_message(
        event.from_user.id,
        f"Please, send your suggestions and wishes in {hlink('telegram', 'https://t.me/ToshiroAi')}",
    )


@router.callback_query(F.data == "ipad")
async def ipad(event: types.CallbackQuery):
    await bot.answer_callback_query(event.id)
    await bot.delete_message(event.from_user.id, event.message.message_id)
    await bot.send_message(
        event.from_user.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—åüì≤:", reply_markup=user_markups.ipad()
    )


@router.callback_query(lambda event: event.data.startswith("ipad_"))
async def ipad_models(event: types.CallbackQuery):
    value = event.data
    await bot.answer_callback_query(event.id)
    await bot.delete_message(event.from_user.id, event.message.message_id)
    await bot.send_message(
        event.from_user.id,
        f"–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ‚è≥1-2 –º–∏–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..",
    )
    if value == "ipad_":
        get_content_ipads.ipad()
        await bot.send_message(event.from_user.id, "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..")
        with open(f"{value}.json", encoding="utf-8") as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = (
                        f"{hlink(item.get('title'), item.get('url'))}\n"
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n"
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    )
                    await bot.send_message(event.from_user.id, card)
                os.remove(f"{value}.json")
                await bot.send_message(
                    event.from_user.id,
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è",
                    reply_markup=user_markups.ipad(),
                )

            except AttributeError:
                for item in data:
                    for i in item:
                        card = (
                            f"{hlink(i.get('title'), i.get('url'))}\n"
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n"
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        )
                        await bot.send_message(event.from_user.id, card)
                os.remove(f"{value}.json")
                await bot.send_message(
                    event.from_user.id,
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è",
                    reply_markup=user_markups.ipad(),
                )
        else:
            os.remove(f"{value}.json")
            await bot.send_message(
                event.from_user.id,
                f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:",
                reply_markup=user_markups.ipad(),
            )

    elif value == "ipad_pro":
        get_content_ipads.ipad_pro()
        await bot.send_message(event.from_user.id, "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..")
        with open(f"{value}.json", encoding="utf-8") as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = (
                        f"{hlink(item.get('title'), item.get('url'))}\n"
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n"
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    )
                    await bot.send_message(event.from_user.id, card)
                os.remove(f"{value}.json")
                await bot.send_message(
                    event.from_user.id,
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è",
                    reply_markup=user_markups.ipad(),
                )

            except AttributeError:
                for item in data:
                    for i in item:
                        card = (
                            f"{hlink(i.get('title'), i.get('url'))}\n"
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n"
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        )
                        await bot.send_message(event.from_user.id, card)
                os.remove(f"{value}.json")
                await bot.send_message(
                    event.from_user.id,
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è",
                    reply_markup=user_markups.ipad(),
                )
        else:
            os.remove(f"{value}.json")
            await bot.send_message(
                event.from_user.id,
                f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:",
                reply_markup=user_markups.ipad(),
            )

    elif value == "ipad_air":
        get_content_ipads.ipad_air()
        await bot.send_message(event.from_user.id, "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..")
        with open(f"{value}.json", encoding="utf-8") as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = (
                        f"{hlink(item.get('title'), item.get('url'))}\n"
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n"
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    )
                    await bot.send_message(event.from_user.id, card)
                os.remove(f"{value}.json")
                await bot.send_message(
                    event.from_user.id,
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è",
                    reply_markup=user_markups.ipad(),
                )

            except AttributeError:
                for item in data:
                    for i in item:
                        card = (
                            f"{hlink(i.get('title'), i.get('url'))}\n"
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n"
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        )
                        await bot.send_message(event.from_user.id, card)
                os.remove(f"{value}.json")
                await bot.send_message(
                    event.from_user.id,
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è",
                    reply_markup=user_markups.ipad(),
                )
        else:
            os.remove(f"{value}.json")
            await bot.send_message(
                event.from_user.id,
                f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:",
                reply_markup=user_markups.ipad(),
            )

    elif value == "ipad_mini":
        get_content_ipads.ipad_mini()
        await bot.send_message(event.from_user.id, "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..")
        with open(f"{value}.json", encoding="utf-8") as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = (
                        f"{hlink(item.get('title'), item.get('url'))}\n"
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n"
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    )
                    await bot.send_message(event.from_user.id, card)
                os.remove(f"{value}.json")
                await bot.send_message(
                    event.from_user.id,
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è",
                    reply_markup=user_markups.ipad(),
                )

            except AttributeError:
                for item in data:
                    for i in item:
                        card = (
                            f"{hlink(i.get('title'), i.get('url'))}\n"
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n"
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        )
                        await bot.send_message(event.from_user.id, card)
                os.remove(f"{value}.json")
                await bot.send_message(
                    event.from_user.id,
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è",
                    reply_markup=user_markups.ipad(),
                )
        else:
            os.remove(f"{value}.json")
            await bot.send_message(
                event.from_user.id,
                f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:",
                reply_markup=user_markups.ipad(),
            )

    else:
        await bot.send_message(
            event.from_user.id, "–£–ø—Å..–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
