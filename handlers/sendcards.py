from aiogram.utils.markdown import hbold, hlink
from dataclasses import dataclass
from create_bot import bot
from markups import user_markups

import json
import os


@dataclass(slots=True, frozen=True)
class MessageCard:
    title: str
    url: str
    available: str
    price: int


@dataclass(slots=True, frozen=True)
class BotMessageMarkup:
    message: str
    keyboard: user_markups


async def send_cards_to_user(event, model) -> MessageCard:
    await bot.send_message(event.from_user.id, "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..")
    with open(f"{model}.json", encoding="utf-8") as file:
        data = json.load(file)
    if len(data) > 0:
        try:
            for item in data:
                card = (
                    f"{hlink(item.get('title'), item.get('url'))}\n"
                    f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n"
                    f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                )
                await bot.send_message(event.from_user.id, card)
            os.remove(f"{model}.json")
            await reply_choose_model(event, model)

        except AttributeError:
            for item in data:
                for info in item:
                    card = (
                        f"{hlink(info.get('title'), info.get('url'))}\n"
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {info.get('available')}üî•\n"
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {info.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    )
                    await bot.send_message(event.from_user.id, card)
            os.remove(f"{model}.json")
            await reply_choose_model(event, model)
    else:
        os.remove(f"{model}.json")
        await reply_sold_model(event, model)


async def reply_choose_model(event, model) -> BotMessageMarkup:
    if model.split("_")[0] == "ipad":
        await bot.send_message(
            event.from_user.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è",
            reply_markup=user_markups.ipad(),
        )
    elif model.split("_")[0] == "iphone":
        await bot.send_message(
            event.from_user.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è",
            reply_markup=user_markups.iphones(),
        )
    elif model.split("_")[0] == "macbook":
        await bot.send_message(
            event.from_user.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è",
            reply_markup=user_markups.mac(),
        )


async def reply_sold_model(event, model) -> BotMessageMarkup:
    if model.split("_")[0] == "ipad":
        await bot.send_message(
            event.from_user.id,
            f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:",
            reply_markup=user_markups.ipad(),
        )
    elif model.split("_")[0] == "iphone":
        await bot.send_message(
            event.from_user.id,
            f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:",
            reply_markup=user_markups.iphones(),
        )
    elif model.split("_")[0] == "mac":
        await bot.send_message(
            event.from_user.id,
            f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:",
            reply_markup=user_markups.mac(),
        )
