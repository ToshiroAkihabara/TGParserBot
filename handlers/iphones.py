from aiogram import types, Router, F
from aiogram.utils.markdown import hbold, hlink
from create_bot import bot
from markups import user_markups
from parser.content_data import get_content_iphones

import json
import os
import logging


router = Router()

logger = logging.getLogger(__name__)
log_level = logging.INFO


@router.callback_query(F.data == 'start')       
async def start(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫–∞—Ç–∞–ª–æ–≥:', reply_markup=user_markups.catalogs())

@router.callback_query(F.data == 'back')        
async def back(call: types.CallbackQuery,):
    await bot.answer_callback_query(call.id)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫–∞—Ç–∞–ª–æ–≥:', reply_markup=user_markups.catalogs())

@router.callback_query(F.data == 'close')        
async def close(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, f"Please, send your suggestions and wishes in {hlink('telegram', 'https://t.me/ToshiroAi')}")

@router.callback_query(F.data == 'iphone')
async def iphone(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—åüì±:', reply_markup=user_markups.iphones())

@router.callback_query(lambda event: event.data.startswith('iphone_'))
async def iphone_models(event: types.callback_query.CallbackQuery):
    value = event.data
    await bot.answer_callback_query(event.id)
    await bot.delete_message(event.from_user.id, event.message.message_id)
    await bot.send_message(event.from_user.id, f'–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ‚è≥1-2 –º–∏–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..')
    if value == 'iphone_14_pro_max':
        get_content_iphones.iphone_14_pro_max()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())
            

    elif value == 'iphone_14_pro':
        get_content_iphones.iphone_14_pro()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_14_plus':
        get_content_iphones.iphone_14_plus()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_14':
        get_content_iphones.iphone_14()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_13_pro_max':
        get_content_iphones.iphone_13_pro_max()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_13_pro':
        get_content_iphones.iphone_13_pro()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_13':
        get_content_iphones.iphone_13()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_13_mini':
        get_content_iphones.iphone_13_mini()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_12_pro_max':
        get_content_iphones.iphone_12_pro_max()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_12_pro':
        get_content_iphones.iphone_12_pro()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
                
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    
    elif value == 'iphone_12':
        get_content_iphones.iphone_12()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
                
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_12_mini':
        get_content_iphones.iphone_12_mini()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_11_pro_max':
        get_content_iphones.iphone_11_pro_max()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_11_pro':
        get_content_iphones.iphone_11_pro()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_11':
        get_content_iphones.iphone_11()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_se_2020':
        get_content_iphones.iphone_se_2020()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())

    elif value == 'iphone_se_2022':
        get_content_iphones.iphone_se_2022()
        await bot.send_message(event.from_user.id, '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–¥–≥—Ä—É–∂–∞—é..')
        with open(f'{value}.json', encoding='utf-8') as file:
            data = json.load(file)
        if len(data) > 0:
            try:
                for item in data:
                    card = f"{hlink(item.get('title'), item.get('url'))}\n" \
                        f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {item.get('available')}üî•\n" \
                        f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {item.get('price')} —Ä—É–±–ª–µ–πüí∏"
                    await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())       
            
            except AttributeError:
                for item in data:
                    for i in item:
                        card = f"{hlink(i.get('title'), i.get('url'))}\n" \
                            f"{hbold('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ')} {i.get('available')}üî•\n" \
                            f"{hbold('–°—Ç–æ–∏–º–æ—Å—Ç—å: ')} {i.get('price')} —Ä—É–±–ª–µ–πüí∏"
                        await bot.send_message(event.from_user.id, card)
                os.remove(f'{value}.json')
                await bot.send_message(event.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–ú–æ–∂–µ—Ç –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å?‚ò∫Ô∏è', reply_markup=user_markups.iphones())
        else:
            os.remove(f'{value}.json')
            await bot.send_message(event.from_user.id, f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –≤—Å–µ –º–æ–¥–µ–ª–∏ {value} —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã‚òπÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å:', reply_markup=user_markups.iphones())
    else:
        await bot.send_message(event.from_user.id, '–£–ø—Å..–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

# def register_handlers_user(dp : Dispatcher):
#     dp.register_callback_query_handler(back, Text(startswith='back'))
#     dp.register_callback_query_handler(close, Text(startswith='close'))
#     dp.register_callback_query_handler(iphone, Text(startswith='iphone'))
#     dp.register_callback_query_handler(iphone_models, Text(startswith='iphone_'))
